combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "[0-9]+[0-9]+\\."))
View(combineddataset3)
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "[0-9]+[0-9]+\\.[0-9]+[0-9]+"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "[0-9][0-9]\\.[0-9]+[0-9]+"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "[0-9][0-9]\\.[0-9]+[0-9]+"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "[0-9][0-9]\\.[0-9][0-9]"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "[0-9]+\\.[0-9][0-9]"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}\\."))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}\\.[0-9]$"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}\\.[0-9]{2}$"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}\\."))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_view(Minimum_Wage, "^[0-9]{2}"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_view(Minimum_Wage, "^[0-9]{2}"))
count
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}")) %>% summarise_if(Minimum10andUp == 1, n())
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}")) %>% summarise_if(Minimum10andUp == 1, n())
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}")) %>% summarise_if(Minimum10andUp == 1, n())
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}")) %>% summarise_if(Minimum10andUp == 1, n())
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))
# Turning population and Testing Rates into a categorical variables.
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= 4499692 ~ "More than Median", Population < 4499692 ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset3 <- combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
# Using a Stringr function (and Regex) to find states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
View(combineddataset3)
# Importing the First Dataset and Indexing Desired Variables.
MinimumWageDataSet <- read.csv("Minimum Wage Data (1).csv")
MinimumWageDataSet <- MinimumWageDataSet[,c(1,2,7)]
# Importing the First Dataset and Indexing Desired Variables.
COVID19Dataset <- read.csv("COVID19_state.csv")
COVID19Dataset <- COVID19Dataset[,c(1:5)]
# Indexing Out the Desired Rows with the Desired Year.
MinimumWageDataSet <- MinimumWageDataSet[MinimumWageDataSet$Year == 2020,]
# Indexing Out the Desired Rows with the Desired Year.
MinimumWageDataSet <- MinimumWageDataSet[MinimumWageDataSet$Year == 2020,]
#### Tidying: Reshaping
If your data sets are tidy already, demonstrate that you can reshape data with pivot wider/longer here (e.g., untidy and then retidy). Alternatively, it may be easier to wait until the wrangling section so you can reshape your summary statistics. Note here if you are going to do this.
```{R}
library(tidyverse)
library(stringr)
library(tidyverse)
library(stringr)
#### Joining/Merging
```{R}
# Unique IDs in Each Dataset.
COVID19Dataset %>% select(State) %>% summarise_all(n_distinct)
MinimumWageDataSet %>% select(State) %>% summarise_all(n_distinct)
# Joining Datasets based on ID.
combineddataset <- inner_join(COVID19Dataset, MinimumWageDataSet, by = "State")
inner_join(COVID19Dataset, MinimumWageDataSet, by = "State") %>% summarise(count = n())
# Seeing which were dropped from the Dataset and seeing which IDs appeared in one but not the other.
anti_join(MinimumWageDataSet, COVID19Dataset, by = "State")
anti_join(MinimumWageDataSet, COVID19Dataset, by = "State") %>% summarise(count = n())
anti_join(COVID19Dataset, MinimumWageDataSet, by = "State")
anti_join(COVID19Dataset, MinimumWageDataSet, by = "State") %>% summarise(count = n())
anti_join(COVID19Dataset, MinimumWageDataSet, by = "State")
anti_join(COVID19Dataset, MinimumWageDataSet, by = "State") %>% summarise(count = n())
####  Wrangling
```{R}
# Use Mutate to Create a New Variable.
combineddataset2 <- combineddataset %>% mutate(Testing_Rate = Tested/Population) %>% rename("Minimum_Wage" = "Effective.Minimum.Wage")
# Turning population and Testing Rates into a categorical variables.
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= 4499692 ~ "More than Median", Population < 4499692 ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
# Create summary statistics of all numeric data.
# Mean of all numeric variables.
combineddataset2 %>% summarise_all(mean)
# Create summary statistics of all numeric data.
# Mean of all numeric variables.
combineddataset2 %>% select(c(2:*)) %>% summarise_all(mean)
# Create summary statistics of all numeric data.
# Mean of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(mean)
# Standard deviation of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(sd)
# Count Number of distinct values in each column.
combineddataset2 %>%  summarise_all(n_distinct)
# Count Number of distinct values in each column.
combineddataset2 %>% summarise_all(n_distinct)
View(combineddataset2)
# Turning population and Testing Rates into a categorical variables.
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= median(Population) ~ "More than Median", Population < median(Population) ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
# Count of states with high/low testing rates and population level.
combineddataset2 %>% group_by(Testing_Level, Minimum_Wage)
# Count of states with high/low testing rates and population level.
combineddataset2 %>% group_by(Testing_Level, Population_Level) %>% summarise(n())
# IQR of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(IQR)
# Median of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(median)
# Max of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(max)
# Count Number of distinct values in each column.
combineddataset2 %>% summarise_all(n_distinct)
# Using two functions after grouping by a catergorical variable.
# Average
combineddataset2 %>% group_by(Population_Level) %>% select(c(2:8)) %>% summarise_all(median)
# Using two functions after grouping by a catergorical variable.
# Average
combineddataset2 %>% group_by(Population_Level) %>% select(c(2:8)) %>% summarise_all(mean)
# Using two functions after grouping by a catergorical variable.
# Average Testing Rate by Population Level.
combineddataset2 %>% group_by(Population_Level) %>% select(Testing_Rate) %>% summarise_all(mean)
# Average Deaths by Minimum Wage Level.
combineddataset2 %>% group_by(Testing_Level) %>% select(Minimum_Wage) %>% summarise_all(mean)
# Compute a Summary Statistic with a User-Defined Function.
combineddataset2 %>% summarise(ProportionPop = fun(x/sum(x)))
# Compute a Summary Statistic with a User-Defined Function.
combineddataset2 %>% summarise(ProportionPop = function(x)(x/sum(x)))
# Compute a Summary Statistic with a User-Defined Function.
combineddataset2 %>% summarise(ProportionPop = function(x)sum(x/sum(x)))
# Compute a Summary Statistic with a User-Defined Function.
proportion <- function(x)(x/sum(x)))
# Compute a Summary Statistic with a User-Defined Function.
proportion <- function(x)(x/sum(x))
combineddataset2 %>% summarise(ProportionPop = proportion(population)
combineddataset2 %>% summarise(ProportionPop = proportion(population))
combineddataset2 %>% summarise(ProportionPop = proportion(population))
combineddataset2 %>% summarise(ProportionPop = proportion(Population))
sum(combineddataset2$Population)
734002/331318992
View(combineddataset)
combineddataset %>% pivot_longer(1:10, names_to = "Catergories", values_to = "Numbers")
combineddataset %>% pivot_longer(2:7, names_to = "Catergories", values_to = "Numbers")
combined <- combineddataset %>% pivot_longer(2:7, names_to = "Catergories", values_to = "Numbers")
View(combined)
untidydataset <- combineddataset %>% pivot_longer(2:7, names_to = "Catergories", values_to = "Numbers")
# Making the data set wider (back to original data set).
untidydataset %>% pivot_wider(names_from = Catergories, values_from = Numbers)
# Making the data set wider (back to original data set).
retidieddataset <- untidydataset %>% pivot_wider(names_from = Catergories, values_from = Numbers)
View(untidydataset)
View(retidieddataset)
untidydataset %>% glimpse()
# Use Mutate to Create a New Variable.
combineddataset2 <- combineddataset %>% mutate(Testing_Rate = Tested/Population) %>% rename("Minimum_Wage" = "Effective.Minimum.Wage")
# Turning population and Testing Rates into a categorical variables.
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= median(Population) ~ "More than Median", Population < median(Population) ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
# Create summary statistics of all numeric data. (Using 5 Unique Functions inside Summarize)
# Mean of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(mean)
# IQR of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(IQR)
# Standard deviation of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(sd)
# Median of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(median)
# Max of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(max)
# Count Number of distinct values in each column.
combineddataset2 %>% summarise_all(n_distinct)
# Using two functions after grouping by a catergorical variable.
# Average Testing Rate by Population Level.
combineddataset2 %>% group_by(Population_Level) %>% select(Testing_Rate) %>% summarise_all(mean)
# Average Minimum Wage by Testing Level.
combineddataset2 %>% group_by(Testing_Level) %>% select(Minimum_Wage) %>% summarise_all(mean)
# Count of states with high/low testing rates and population level. (Summarizing after Grouping by Two Variables)
combineddataset2 %>% group_by(Testing_Level, Population_Level) %>% summarise(n())
# Compute a Summary Statistic with a User-Defined Function.
proportion <- function(x)(x/sum(x))
combineddataset2 %>% summarise(ProportionPop = proportion(Population))
# Count of states with high/low testing rates and population level. (Summarizing after Grouping by Two Variables)
combineddataset2 %>% group_by(Testing_Level, Population_Level) %>% summarise(n())
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
MinimumWageDataSet %>% select(State) %>% summarise_all(n_distinct)
# Unique IDs in Each Dataset.
COVID19Dataset %>% select(State) %>% summarise_all(n_distinct)
MinimumWageDataSet %>% select(State) %>% summarise_all(n_distinct)
# Use Mutate to Create a New Variable.
combineddataset2 <- combineddataset %>% mutate(Testing_Rate = Tested/Population) %>% rename("Minimum_Wage" = "Effective.Minimum.Wage")
# Turning population and Testing Rates into a categorical variables.
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= median(Population) ~ "More than Median", Population < median(Population) ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
# Create summary statistics of all numeric data. (Using 5 Unique Functions inside Summarize)
# Mean of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(mean)
# IQR of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(IQR)
# Standard deviation of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(sd)
# Median of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(median)
# Max of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(max)
# Count Number of distinct values in each column.
combineddataset2 %>% summarise_all(n_distinct)
# Using two functions after grouping by a catergorical variable.
# Average Testing Rate by Population Level.
combineddataset2 %>% group_by(Population_Level) %>% select(Testing_Rate) %>% summarise_all(mean)
# Average Minimum Wage by Testing Level.
combineddataset2 %>% group_by(Testing_Level) %>% select(Minimum_Wage) %>% summarise_all(mean)
# Count of states with high/low testing rates and population level. (Summarizing after Grouping by Two Variables)
combineddataset2 %>% group_by(Testing_Level, Population_Level) %>% summarise(n())
# Compute a Summary Statistic with a User-Defined Function.
proportion <- function(x)(x/sum(x))
combineddataset2 %>% summarise(ProportionPop = proportion(Population))
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths))
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths)) + geom_line()
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths)) + geom_point()
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths)) + geom_point() + geom_smooth(method = "lm")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = State)) + geom_point() + geom_smooth(method = "lm")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = State)) + geom_point() + geom_smooth(method = "lm")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Population_Level)) + geom_point() + geom_smooth(method = "lm")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm")
View(combineddataset2)
combineddataset2 %>% ggplot(aes(Population, Testing_Rate)) + geom_point()
combineddataset2 %>% ggplot(aes(Testing_Rate)) + geom_point()
combineddataset2 %>% ggplot(aes(Testing_Rate)) + geom_histogram()
combineddataset2 %>% ggplot(aes(Population, Testing_Rate)) + geom_histogram(stat = "identity")
# Create summary statistics of all numeric data. (Using 5 Unique Functions inside Summarize)
# Mean of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(mean)
# Use all six core dplyr functions.
# filter()
combineddataset2 %>% filter(Population_Level == "More than Median") %>% summarise_all(mean)
# Use all six core dplyr functions.
# filter()
combineddataset2 %>% filter(Testing_Level == "More than Median") %>% summarise_all(mean)
# Use all six core dplyr functions.
# filter()
combineddataset2 %>% filter(Testing_Level == "More than Half") %>% summarise_all(mean)
# Use all six core dplyr functions.
# filter()
combineddataset2 %>% filter(Testing_Level == "More than Half") %>% summarise(mean(Minimum_Wage))
# Use all six core dplyr functions.
# filter()
combineddataset2 %>% filter(Testing_Level == "More than Half") %>% summarise(AverageMinimumWage = mean(Minimum_Wage))
# Use all six core dplyr functions.
# filter()
combineddataset2 %>% filter(Testing_Level == "More than Half") %>% summarise(Average_Minimum_Wage = mean(Minimum_Wage))
# arrange() to find highest population sizes.
combineddataset2 %>% arrange(Population)
# arrange() to find highest population sizes.
combineddataset2 %>% arrange(desc(Population))
# arrange() to find highest population sizes.
combineddataset2 %>% arrange(desc(Population)) %>% slice(1)
# arrange() to find the top three states with the highest population sizes.
combineddataset2 %>% arrange(desc(Population)) %>% slice(3)
# arrange() to find the top three states with the highest population sizes.
combineddataset2 %>% arrange(desc(Population)) %>% slice(1:3)
# select()
combineddataset2 %>% select(Population_Level) %>% summarise(n())
# select()
combineddataset2 %>% select(Population_Level) %>% summarise(mean)
# select()
combineddataset2 %>% select(State == "Texas") %>% summarise(mean)
View(retidieddataset)
# select()
combineddataset2 %>% select(Population, Tested) %>% summarise(mean)
# select()
combineddataset2 %>% select(State, Population, Tested) %>% summarise(mean)
# select()
combineddataset2 %>% select(State, Population, Tested) %>% summarise_all(mean)
# select()
combineddataset2 %>% select(Population, Tested) %>% summarise_all(mean)
View(MinimumWageDataSet)
# group_by() to
combineddataset2 %>% group_by(Population_Level) %>% summarise(n())
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Number of Deaths")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Deaths, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Number of Deaths") + theme(legend.position = "none")
combineddataset2 <- combineddataset2 %>% mutate(Death_Rate = Deaths/Population)
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Number of Deaths") + theme(legend.position = "none") + ggtitle("Death Rate per ")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Number of Deaths") + theme(legend.position = "none") + ggtitle("Death Rate against Minimum Wage")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Number of Deaths") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
# Importing the First Dataset and Indexing Desired Variables.
MinimumWageDataSet <- read.csv("Minimum Wage Data (1).csv")
View(MinimumWageDataSet)
MinimumWageDataSet <- MinimumWageDataSet[,c(1,2,7)]
MinimumWageDataSet %>% select(State) %>% summarise_all(n_distinct)
# Unique IDs in Each Dataset.
COVID19Dataset %>% select(State) %>% summarise_all(n_distinct)
# Use all six core dplyr functions.
# mutate() to turn population and testing Rates into a categorical variables.
combineddataset2 <- combineddataset %>% mutate(Testing_Rate = Tested/Population) %>% rename("Minimum_Wage" = "Effective.Minimum.Wage")
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= median(Population) ~ "More than Median", Population < median(Population) ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
---
title: 'Project 1: Wrangling, Exploration, Visualization'
author: "SDS322E"
date: ''
output:
pdf_document:
toc: no
html_document:
toc: yes
toc_float:
collapsed: no
smooth_scroll: yes
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center", warning = F, message = F,
tidy=TRUE, tidy.opts=list(width.cutoff=60), R.options=list(max.print=100))
```
## Data Wrangling, Exploration, Visualization
### Filina Nurcahya-Tjoa UTEID : fnt226
#### Introduction
Paragraph or two introducing your data sets and variables, why they are interesting to you, etc.
My first data set shows the minimum wages for 54 different states throughout a period from 1968 to 2020. My second data set shows COVID-19 statistics for 51 different states throughout 2020. It has many variables such as the number of deaths, people tested, etc. I am interested in this data because of how COVID-19 has affected us all very differently. Many people's financial situation took a turn for the worse during this pandemic.
For my project, I'm going to be investigating the relationship between the minimum wage of the state and how its residents are affected by COVID-19. From this, I am hoping to find out how finances influences the survivability of COVID-19. I'm going to be focusing on the number of tests, number of deaths, number of infections, population size, and the minimum of each state. I feel like these variables would best give me the best snapshot of the data I am looking for. I also indexed out the minimum wages data set so that it only had information for 2020 which is during the majority of the pandemic.
```{R}
# Importing the First Dataset and Indexing Desired Variables.
MinimumWageDataSet <- read.csv("Minimum Wage Data (1).csv")
MinimumWageDataSet <- MinimumWageDataSet[,c(1,2,7)]
# Importing the First Dataset and Indexing Desired Variables.
COVID19Dataset <- read.csv("COVID19_state.csv")
COVID19Dataset <- COVID19Dataset[,c(1:5)]
# Indexing Out the Desired Rows with the Desired Year.
MinimumWageDataSet <- MinimumWageDataSet[MinimumWageDataSet$Year == 2020,]
```
#### Tidying: Reshaping
If your data sets are tidy already, demonstrate that you can reshape data with pivot wider/longer here (e.g., untidy and then retidy). Alternatively, it may be easier to wait until the wrangling section so you can reshape your summary statistics. Note here if you are going to do this.
```{R}
library(tidyverse)
library(stringr)
# Joining Datasets based on ID.
combineddataset <- inner_join(COVID19Dataset, MinimumWageDataSet, by = "State")
# Making the data set longer.
untidydataset <- combineddataset %>% pivot_longer(2:7, names_to = "Catergories", values_to = "Numbers")
untidydataset %>% glimpse()
# Making the data set wider (back to original data set).
retidieddataset <- untidydataset %>% pivot_wider(names_from = Catergories, values_from = Numbers)
retidieddataset %>% glimpse()
```
#### Joining/Merging
```{R}
# Unique IDs in Each Dataset.
COVID19Dataset %>% select(State) %>% summarise_all(n_distinct)
MinimumWageDataSet %>% select(State) %>% summarise_all(n_distinct)
# Joining Datasets based on ID.
combineddataset <- inner_join(COVID19Dataset, MinimumWageDataSet, by = "State")
inner_join(COVID19Dataset, MinimumWageDataSet, by = "State") %>% summarise(count = n())
# Seeing which were dropped from the Dataset and seeing which IDs appeared in one but not the other.
anti_join(MinimumWageDataSet, COVID19Dataset, by = "State")
anti_join(MinimumWageDataSet, COVID19Dataset, by = "State") %>% summarise(count = n())
anti_join(COVID19Dataset, MinimumWageDataSet, by = "State")
anti_join(COVID19Dataset, MinimumWageDataSet, by = "State") %>% summarise(count = n())
```
####  Wrangling
```{R}
# Use all six core dplyr functions.
# mutate() to turn population and testing Rates into a categorical variables.
combineddataset2 <- combineddataset %>% mutate(Testing_Rate = Tested/Population) %>% rename("Minimum_Wage" = "Effective.Minimum.Wage")
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= median(Population) ~ "More than Median", Population < median(Population) ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
combineddataset2 <- combineddataset2 %>% mutate(Death_Rate = Deaths/Population)
# filter() to find average minimum wage in states that have more than more than 50% of population tested.
combineddataset2 %>% filter(Testing_Level == "More than Half") %>% summarise(Average_Minimum_Wage = mean(Minimum_Wage))
# arrange() to find the top three states with the highest population sizes.
combineddataset2 %>% arrange(desc(Population)) %>% slice(1:3)
# select() and summarize() to find mean of only population and number of people tested.
combineddataset2 %>% select(Population, Tested) %>% summarise_all(mean)
# group_by() to find count of each state in each population level.
combineddataset2 %>% group_by(Population_Level) %>% summarise(n())
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
# Create summary statistics of all numeric data. (Using 5 Unique Functions inside Summarize)
# Mean of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(mean)
# IQR of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(IQR)
# Standard deviation of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(sd)
# Median of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(median)
# Max of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(max)
# Count Number of distinct values in each column.
combineddataset2 %>% summarise_all(n_distinct)
# Using two functions after grouping by a catergorical variable.
# Average Testing Rate by Population Level.
combineddataset2 %>% group_by(Population_Level) %>% select(Testing_Rate) %>% summarise_all(mean)
# Average Minimum Wage by Testing Level.
combineddataset2 %>% group_by(Testing_Level) %>% select(Minimum_Wage) %>% summarise_all(mean)
# Count of states with high/low testing rates and population level. (Summarizing after Grouping by Two Variables)
combineddataset2 %>% group_by(Testing_Level, Population_Level) %>% summarise(n())
# Compute a Summary Statistic with a User-Defined Function.
proportion <- function(x)(x/sum(x))
combineddataset2 %>% summarise(ProportionPop = proportion(Population)) %>% head()
```
Your discussion of wrangling section here. Feel encouraged to break up into more than once code chunk and discuss each in turn.
#### Visualizing
```{R}
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
```
This plot shows a positive, linear relationship between the minimum wage($) and the death rate. This means that the death rate increases with the minimum wage. This was not the relationship I was expecting as I thought higher minimum wages means more access to health care. However, this relationship may be because the higher cost of living in those areas mean that people have less disposable income.
```{R}
```
Your discussion of plot 2
```{R}
# your plot 3
```
Your discussion of plot 3
#### Concluding Remarks
If any!
# Use all six core dplyr functions.
# mutate() to turn population and testing Rates into a categorical variables.
combineddataset2 <- combineddataset %>% mutate(Testing_Rate = Tested/Population) %>% rename("Minimum_Wage" = "Effective.Minimum.Wage")
combineddataset2 <- combineddataset2 %>% mutate(Population_Level = case_when(Population >= median(Population) ~ "More than Median", Population < median(Population) ~ "Less than Median")) %>% mutate(Testing_Level = case_when(Testing_Rate >= 0.5 ~ "More than Half", Testing_Rate < 0.5 ~ "Less than Half"))
combineddataset2 <- combineddataset2 %>% mutate(Death_Rate = Deaths/Population)
# filter() to find average minimum wage in states that have more than more than 50% of population tested.
combineddataset2 %>% filter(Testing_Level == "More than Half") %>% summarise(Average_Minimum_Wage = mean(Minimum_Wage))
# arrange() to find the top three states with the highest population sizes.
combineddataset2 %>% arrange(desc(Population)) %>% slice(1:3)
# select() and summarize() to find mean of only population and number of people tested.
combineddataset2 %>% select(Population, Tested) %>% summarise_all(mean)
# group_by() to find count of each state in each population level.
combineddataset2 %>% group_by(Population_Level) %>% summarise(n())
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
# Create summary statistics of all numeric data. (Using 5 Unique Functions inside Summarize)
# Mean of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(mean)
# IQR of all numeric variables.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(IQR)
# Standard deviation of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(sd)
# Median of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(median)
# Max of all numeric data.
combineddataset2 %>% select(c(2:8)) %>% summarise_all(max)
# Count Number of distinct values in each column.
combineddataset2 %>% summarise_all(n_distinct)
# Using two functions after grouping by a catergorical variable.
# Average Testing Rate by Population Level.
combineddataset2 %>% group_by(Population_Level) %>% select(Testing_Rate) %>% summarise_all(mean)
# Average Minimum Wage by Testing Level.
combineddataset2 %>% group_by(Testing_Level) %>% select(Minimum_Wage) %>% summarise_all(mean)
# Count of states with high/low testing rates and population level. (Summarizing after Grouping by Two Variables)
combineddataset2 %>% group_by(Testing_Level, Population_Level) %>% summarise(n())
# Compute a Summary Statistic with a User-Defined Function.
proportion <- function(x)(x/sum(x))
combineddataset2 %>% summarise(ProportionPop = proportion(Population)) %>% head()
# Compute a Summary Statistic with a User-Defined Function.
proportion <- function(x)(x/sum(x))
combineddataset2 %>% summarise(ProportionPop = proportion(Population)) %>% head()
View(combineddataset2)
# Using a Stringr function (and Regex) to find number of states with a minimum wage of more than two digits.
combineddataset2 %>% mutate(Minimum10andUp = str_count(Minimum_Wage, "^[0-9]{2}"))  %>% group_by(Minimum10andUp) %>% summarise(n())
17/51
# Using two functions after grouping by a catergorical variable.
# Average Testing Rate by Population Level.
combineddataset2 %>% group_by(Population_Level) %>% select(Testing_Rate) %>% summarise_all(mean)
# Average Minimum Wage by Testing Level.
combineddataset2 %>% group_by(Testing_Level) %>% select(Minimum_Wage) %>% summarise_all(mean)
# Count of states with high/low testing rates and population level. (Summarizing after Grouping by Two Variables)
combineddataset2 %>% group_by(Testing_Level, Population_Level) %>% summarise(n())
combineddataset2 %>% ggplot(aes(Population, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
combineddataset2 %>% ggplot(aes(Population, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
combineddataset2 %>% ggplot(aes(Population, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population")
combineddataset2 %>% ggplot(aes(Population, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population") + scale_color_viridis_c()
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_colour_viridis_b()
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_colour_viridis_a()
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_brewer("Green")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_brewer("Green")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_discrete("greens")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_continuous("greens")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_continuous("Greens")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_continuous("Orange")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_continuous("Pink")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage") + scale_color_continuous("Red")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
combineddataset2 %>% ggplot(aes(Population, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population") + scale_color_viridis_c()
Death_Rate
combineddataset2 %>% ggplot(aes(Testing_Rate, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population") + scale_color_viridis_c()
combineddataset2 %>% ggplot(aes(Population_Level, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population") + scale_color_viridis_c()
combineddataset2 %>% ggplot(aes(Population_Level, Death_Rate, col = Testing_Rate)) + geom_boxplot() + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population") + scale_color_viridis_c()
combineddataset2 %>% ggplot(aes(Population_Level, Death_Rate, col = Testing_Rate)) + geom_boxplot() + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population")
combineddataset2 %>% ggplot(aes(Population_Level, Minimum_Wage, col = Testing_Rate)) + geom_boxplot() + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population")
combineddataset2 %>% ggplot(aes(Population_Level, Minimum_Wage, col = Minimum_Wage)) + geom_boxplot() + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population")
combineddataset2 %>% ggplot(aes(Population_Level, Minimum_Wage, col = Population_Level)) + geom_boxplot() + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population")
combineddataset2 %>% ggplot(aes(Population_Level, Minimum_Wage, fill = Population_Level)) + geom_boxplot() + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
combineddataset2 %>% ggplot(aes(Minimum_Wage, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Death Rate") + theme(legend.position = "none") + ggtitle("Death Rate against \n Minimum Wage")
This plot shows a positive, linear relationship between the minimum wage($) and the death rate. This means that the death rate increases with the minimum wage. This was not the relationship I was expecting as I thought higher minimum wages means more access to health care. However, this relationship may be because the higher cost of living in those areas mean that people have less disposable income.
```{R}
combineddataset2 %>% ggplot(aes(Population, Death_Rate, col = Testing_Rate)) + geom_point() + geom_smooth(method = "lm", se = FALSE, col = "darkseagreen4") + xlab("Minimum Wage ($)") + ylab("Population") + theme(legend.position = "none") + ggtitle("Death Rate against Population") + scale_color_viridis_c()
